
Lab_08_Task_05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ae  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060d  00000000  00000000  00000856  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f3  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 49 00 	call	0x92	; 0x92 <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z7T0Delayv>:
	}
}

void T0Delay()
{
	TCNT0 = 0;      // Reset Timer0 counter
  80:	16 bc       	out	0x26, r1	; 38
	TCCR0B = 0x01;  // Start Timer0 normal mode
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	85 bd       	out	0x25, r24	; 37
	while ((TIFR0 & (1 << TOV0)) == 0); // Wait for Timer0 overflow flag to be set
  86:	a8 9b       	sbis	0x15, 0	; 21
  88:	fe cf       	rjmp	.-4      	; 0x86 <_Z7T0Delayv+0x6>
	TCCR0A = 0;   // Reset Timer0 control register A
  8a:	14 bc       	out	0x24, r1	; 36
	TIFR0 = 0x01; // Clear Timer0 overflow flag
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	85 bb       	out	0x15, r24	; 21
  90:	08 95       	ret

00000092 <main>:

void T0Delay(); // Function prototype for delay using Timer0

int main(void)
{
	DDRB = 0b00000111; // Set PORTB pins 0, 1, and 2 as output
  92:	87 e0       	ldi	r24, 0x07	; 7
  94:	84 b9       	out	0x04, r24	; 4

	while (1) // Infinite loop for Square Wave 
	{
		PORTB = 0b00000111; // Set PORTB pins 0, 1, and 2 to high (  )
  96:	87 e0       	ldi	r24, 0x07	; 7
  98:	85 b9       	out	0x05, r24	; 5
		T0Delay(); // Delay of ( 25% of the square wave ) using Timer0
  9a:	0e 94 40 00 	call	0x80	; 0x80 <_Z7T0Delayv>
		// Set PORTB pins 1 and 2 to high, pin 0 to low ( Pin 0 will give 25% duty cycle square wave )
		PORTB = 0b00000110; 
  9e:	86 e0       	ldi	r24, 0x06	; 6
  a0:	85 b9       	out	0x05, r24	; 5
		T0Delay(); // Delay of ( 25% of the square wave ) using Timer0
  a2:	0e 94 40 00 	call	0x80	; 0x80 <_Z7T0Delayv>
		// Set PORTB pin 2 to high, pin 0 and pin 1 to low ( Pin 1 will give 50% duty cycle square wave )
		PORTB = 0b00000100; 
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	85 b9       	out	0x05, r24	; 5
		T0Delay(); // Delay of ( 25% of the square wave ) using Timer0
  aa:	0e 94 40 00 	call	0x80	; 0x80 <_Z7T0Delayv>
		 // Set PORTB pins 1 , 2 and 0 to low ( Pin 2 will give 75% duty cycle square wave )
		PORTB = 0b00000000;
  ae:	15 b8       	out	0x05, r1	; 5
		T0Delay(); // Delay of ( 25% of the square wave ) using Timer0
  b0:	0e 94 40 00 	call	0x80	; 0x80 <_Z7T0Delayv>
  b4:	f0 cf       	rjmp	.-32     	; 0x96 <main+0x4>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
