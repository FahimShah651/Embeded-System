
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000175  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000183  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c8  00000000  00000000  000001ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000650  00000000  00000000  00000a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000214  00000000  00000000  000010c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Delay   00000012  000000b2  000000b2  00000126  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000001c  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000000ce  000000ce  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  000000d0  000000d0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  0000009c  0000009c  00000110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 4e 00 	jmp	0x9c	; 0x9c <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Delay:

000000b2 <Delay>:
#include "avr/io.h"
void Delay(int n){
	for (int i = 0; i<=n;i++);
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <Delay+0xa>
  b8:	2f 5f       	subi	r18, 0xFF	; 255
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	82 17       	cp	r24, r18
  be:	93 07       	cpc	r25, r19
  c0:	dc f7       	brge	.-10     	; 0xb8 <Delay+0x6>
}
  c2:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
int main()
{
	DDRB = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	while(1)
	{
		PORTB = 1;
  84:	c1 e0       	ldi	r28, 0x01	; 1
  86:	c5 b9       	out	0x05, r28	; 5
		Delay(100);
  88:	84 e6       	ldi	r24, 0x64	; 100
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 59 00 	call	0xb2	; 0xb2 <Delay>
		PORTB = 1;
  90:	c5 b9       	out	0x05, r28	; 5
		Delay(100);
  92:	84 e6       	ldi	r24, 0x64	; 100
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 59 00 	call	0xb2	; 0xb2 <Delay>
  9a:	f4 cf       	rjmp	.-24     	; 0x84 <main+0x4>

Disassembly of section .text.__dummy_fini:

000000cc <_fini>:
  cc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000ce <__funcs_on_exit>:
  ce:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000d0 <__simulator_exit>:
  d0:	08 95       	ret

Disassembly of section .text.exit:

0000009c <exit>:
  9c:	ec 01       	movw	r28, r24
  9e:	0e 94 67 00 	call	0xce	; 0xce <__funcs_on_exit>
  a2:	0e 94 66 00 	call	0xcc	; 0xcc <_fini>
  a6:	ce 01       	movw	r24, r28
  a8:	0e 94 68 00 	call	0xd0	; 0xd0 <__simulator_exit>
  ac:	ce 01       	movw	r24, r28
  ae:	0e 94 64 00 	call	0xc8	; 0xc8 <_Exit>

Disassembly of section .text._Exit:

000000c8 <_Exit>:
  c8:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
