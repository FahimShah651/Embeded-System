
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000158  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091e  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000704  00000000  00000000  00000bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  000012c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000415  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000219  00000000  00000000  00001a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 98 00 	call	0x130	; 0x130 <main>
  8e:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z7lcd_cmdc>:
	lcd_cmd(0x80);
}

void lcd_cmd(char cmd)
{
	PORTD = cmd;
  96:	8b b9       	out	0x0b, r24	; 11
	PORTB |=(1<<2);
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	85 b9       	out	0x05, r24	; 5
	PORTB &=~((1<<0)|(1<<1));
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8c 7f       	andi	r24, 0xFC	; 252
  a2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8f e1       	ldi	r24, 0x1F	; 31
  a6:	9e e4       	ldi	r25, 0x4E	; 78
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <_Z7lcd_cmdc+0x12>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_Z7lcd_cmdc+0x18>
  ae:	00 00       	nop
	DL;
	PORTB  &=~(1<<2);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	8f e1       	ldi	r24, 0x1F	; 31
  b8:	9e e4       	ldi	r25, 0x4E	; 78
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <_Z7lcd_cmdc+0x24>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_Z7lcd_cmdc+0x2a>
  c0:	00 00       	nop
  c2:	08 95       	ret

000000c4 <_Z8lcd_initv>:
void lcd_cmd(char cmd);
void lcd_string(char *str);

void lcd_init()
{
	DDRD = 0xff;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1<<0)|(1<<1)|(1<<2);
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	84 b9       	out	0x04, r24	; 4
	lcd_cmd(0x38);
  ce:	88 e3       	ldi	r24, 0x38	; 56
  d0:	0e 94 4b 00 	call	0x96	; 0x96 <_Z7lcd_cmdc>
	lcd_cmd(0x01);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 4b 00 	call	0x96	; 0x96 <_Z7lcd_cmdc>
	lcd_cmd(0x0e);
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	0e 94 4b 00 	call	0x96	; 0x96 <_Z7lcd_cmdc>
	lcd_cmd(0x80);
  e0:	80 e8       	ldi	r24, 0x80	; 128
  e2:	0e 94 4b 00 	call	0x96	; 0x96 <_Z7lcd_cmdc>
  e6:	08 95       	ret

000000e8 <_Z8lcd_datac>:
	DL;
}

void lcd_data(char data)
{
	PORTD =data;
  e8:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<0)|(1<<2);
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	85 60       	ori	r24, 0x05	; 5
  ee:	85 b9       	out	0x05, r24	; 5
	PORTB &=~(1<<1);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	8d 7f       	andi	r24, 0xFD	; 253
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	8f e1       	ldi	r24, 0x1F	; 31
  f8:	9e e4       	ldi	r25, 0x4E	; 78
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <_Z8lcd_datac+0x12>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <_Z8lcd_datac+0x18>
 100:	00 00       	nop
	DL;
	PORTB &=~(1<<2);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	85 b9       	out	0x05, r24	; 5
 108:	8f e1       	ldi	r24, 0x1F	; 31
 10a:	9e e4       	ldi	r25, 0x4E	; 78
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <_Z8lcd_datac+0x24>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_Z8lcd_datac+0x2a>
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <_Z10lcd_stringPc>:
	DL;
}

void lcd_string(char *str)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ec 01       	movw	r28, r24
	while(*str != '\0')
 11c:	88 81       	ld	r24, Y
 11e:	88 23       	and	r24, r24
 120:	21 f0       	breq	.+8      	; 0x12a <_Z10lcd_stringPc+0x14>
	{
	lcd_data(*str);
 122:	0e 94 74 00 	call	0xe8	; 0xe8 <_Z8lcd_datac>
	str++;	
 126:	21 96       	adiw	r28, 0x01	; 1
	DL;
}

void lcd_string(char *str)
{
	while(*str != '\0')
 128:	f9 cf       	rjmp	.-14     	; 0x11c <_Z10lcd_stringPc+0x6>
	{
	lcd_data(*str);
	str++;	
	}
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <main>:



int main()
{
	lcd_init();
 130:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z8lcd_initv>
	lcd_cmd(0x80);
 134:	80 e8       	ldi	r24, 0x80	; 128
 136:	0e 94 4b 00 	call	0x96	; 0x96 <_Z7lcd_cmdc>
	lcd_string("Fahim Shah , is the student of NAMAL");
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 8b 00 	call	0x116	; 0x116 <_Z10lcd_stringPc>
 142:	8f e1       	ldi	r24, 0x1F	; 31
 144:	9e e4       	ldi	r25, 0x4E	; 78
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x16>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x1c>
 14c:	00 00       	nop
	DL;
	
   return 0;
}
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
