
lab_10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000266  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c62  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000732  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000465  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000449  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f2  00000000  00000000  00002075  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002567  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  8e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z10LCD_Actionh>:
#define ENPIN PD1         // Enable pin for LCD

// Function to send a command to the LCD
void LCD_Action(unsigned char cmnd)
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); // Send high nibble of command
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	92 2b       	or	r25, r18
  a0:	9b b9       	out	0x0b, r25	; 11
	LCD_Port &= ~(1 << RSPIN);      // RS = 0 for command mode
  a2:	9b b1       	in	r25, 0x0b	; 11
  a4:	9e 7f       	andi	r25, 0xFE	; 254
  a6:	9b b9       	out	0x0b, r25	; 11
	LCD_Port |= (1 << ENPIN);        // Enable LCD (EN = 1) for high-to-low transition
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	92 60       	ori	r25, 0x02	; 2
  ac:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	35 e0       	ldi	r19, 0x05	; 5
  b0:	3a 95       	dec	r19
  b2:	f1 f7       	brne	.-4      	; 0xb0 <_Z10LCD_Actionh+0x1a>
  b4:	00 00       	nop
	_delay_us(1);                    // Wait for enable pulse width
	LCD_Port &= ~(1 << ENPIN);      // Disable LCD (EN = 0) for low-to-high transition
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	9d 7f       	andi	r25, 0xFD	; 253
  ba:	9b b9       	out	0x0b, r25	; 11
  bc:	ef e1       	ldi	r30, 0x1F	; 31
  be:	f3 e0       	ldi	r31, 0x03	; 3
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <_Z10LCD_Actionh+0x2a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z10LCD_Actionh+0x30>
  c6:	00 00       	nop
	_delay_us(200);                  // Wait for command execution time
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  // Send low nibble of command
  c8:	2b b1       	in	r18, 0x0b	; 11
  ca:	f0 e1       	ldi	r31, 0x10	; 16
  cc:	8f 9f       	mul	r24, r31
  ce:	c0 01       	movw	r24, r0
  d0:	11 24       	eor	r1, r1
  d2:	92 2f       	mov	r25, r18
  d4:	9f 70       	andi	r25, 0x0F	; 15
  d6:	89 2b       	or	r24, r25
  d8:	8b b9       	out	0x0b, r24	; 11
	LCD_Port |= (1 << ENPIN);        // Enable LCD (EN = 1) for high-to-low transition
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	35 e0       	ldi	r19, 0x05	; 5
  e2:	3a 95       	dec	r19
  e4:	f1 f7       	brne	.-4      	; 0xe2 <_Z10LCD_Actionh+0x4c>
  e6:	00 00       	nop
	_delay_us(1);                    // Wait for enable pulse width
	LCD_Port &= ~(1 << ENPIN);      // Disable LCD (EN = 0) for low-to-high transition
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f e3       	ldi	r24, 0x3F	; 63
  f0:	9f e1       	ldi	r25, 0x1F	; 31
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <_Z10LCD_Actionh+0x5c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_Z10LCD_Actionh+0x62>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <_Z8LCD_Initv>:
}

// Function to initialize the LCD
void LCD_Init (void)
{
	LCD_DPin = 0xFF;      // Set LCD data pins as output
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8a b9       	out	0x0a, r24	; 10
 100:	8f e5       	ldi	r24, 0x5F	; 95
 102:	9a ee       	ldi	r25, 0xEA	; 234
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <_Z8LCD_Initv+0x8>
 108:	00 c0       	rjmp	.+0      	; 0x10a <_Z8LCD_Initv+0xe>
 10a:	00 00       	nop
	_delay_ms(15);        // Power-up delay
	
	LCD_Action(0x33);    // Initialization sequence
 10c:	83 e3       	ldi	r24, 0x33	; 51
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10LCD_Actionh>
	LCD_Action(0x32);    // Initialization sequence
 112:	82 e3       	ldi	r24, 0x32	; 50
 114:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10LCD_Actionh>
	LCD_Action(0x28);    // 2 lines and 5x7 matrix (4-bit mode)
 118:	88 e2       	ldi	r24, 0x28	; 40
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10LCD_Actionh>
	LCD_Action(0x02);    // Return home
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10LCD_Actionh>
	LCD_Action(0x0C);    // Display on, cursor off
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10LCD_Actionh>
	LCD_Action(0x06);    // Shift cursor right
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10LCD_Actionh>
	LCD_Action(0x01);    // Clear display
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10LCD_Actionh>
 136:	8f e3       	ldi	r24, 0x3F	; 63
 138:	9f e1       	ldi	r25, 0x1F	; 31
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <_Z8LCD_Initv+0x3e>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <_Z8LCD_Initv+0x44>
 140:	00 00       	nop
 142:	08 95       	ret

00000144 <_Z9LCD_Clearv>:
}

// Function to clear the LCD display
void LCD_Clear()
{
	LCD_Action(0x01);  // Clear display
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10LCD_Actionh>
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9f e1       	ldi	r25, 0x1F	; 31
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <_Z9LCD_Clearv+0xa>
 152:	00 c0       	rjmp	.+0      	; 0x154 <_Z9LCD_Clearv+0x10>
 154:	00 00       	nop
	_delay_ms(2);      // Wait for clear operation to complete
	LCD_Action(0x80);  // Move cursor to the beginning of the first line
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10LCD_Actionh>
 15c:	08 95       	ret

0000015e <_Z9LCD_PrintPc>:
}

// Function to print a string on the LCD
void LCD_Print (char *str)
{
 15e:	fc 01       	movw	r30, r24
	int i;  // Index variable
	for(i=0; str[i]!=0; i++)  // Iterate through each character in the string
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	df 01       	movw	r26, r30
 166:	a6 0f       	add	r26, r22
 168:	b7 1f       	adc	r27, r23
 16a:	9c 91       	ld	r25, X
 16c:	99 23       	and	r25, r25
 16e:	a9 f1       	breq	.+106    	; 0x1da <_Z9LCD_PrintPc+0x7c>
	{
		LCD_Port = (LCD_Port & 0x0F) | (str[i] & 0xF0);  // Send high nibble of character
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	8f 70       	andi	r24, 0x0F	; 15
 174:	90 7f       	andi	r25, 0xF0	; 240
 176:	98 2b       	or	r25, r24
 178:	9b b9       	out	0x0b, r25	; 11
		LCD_Port |= (1<<RSPIN);                         // Set RS pin high for data mode
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	8b b9       	out	0x0b, r24	; 11
		LCD_Port|= (1<<ENPIN);                          // Enable LCD (EN = 1) for high-to-low transition
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	82 60       	ori	r24, 0x02	; 2
 184:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	8a 95       	dec	r24
 18a:	f1 f7       	brne	.-4      	; 0x188 <_Z9LCD_PrintPc+0x2a>
 18c:	00 00       	nop
		_delay_us(1);                                   // Wait for enable pulse width
		LCD_Port &= ~(1<<ENPIN);                         // Disable LCD (EN = 0) for low-to-high transition
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	8b b9       	out	0x0b, r24	; 11
 194:	8f e1       	ldi	r24, 0x1F	; 31
 196:	93 e0       	ldi	r25, 0x03	; 3
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <_Z9LCD_PrintPc+0x3a>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <_Z9LCD_PrintPc+0x40>
 19e:	00 00       	nop
		_delay_us(200);                                 // Wait for character execution time
		LCD_Port = (LCD_Port & 0x0F) | (str[i] << 4);    // Send low nibble of character
 1a0:	4b b1       	in	r20, 0x0b	; 11
 1a2:	9c 91       	ld	r25, X
 1a4:	80 e1       	ldi	r24, 0x10	; 16
 1a6:	98 9f       	mul	r25, r24
 1a8:	90 01       	movw	r18, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	94 2f       	mov	r25, r20
 1ae:	9f 70       	andi	r25, 0x0F	; 15
 1b0:	29 2b       	or	r18, r25
 1b2:	2b b9       	out	0x0b, r18	; 11
		LCD_Port |= (1<<ENPIN);                          // Enable LCD (EN = 1) for high-to-low transition
 1b4:	9b b1       	in	r25, 0x0b	; 11
 1b6:	92 60       	ori	r25, 0x02	; 2
 1b8:	9b b9       	out	0x0b, r25	; 11
 1ba:	95 e0       	ldi	r25, 0x05	; 5
 1bc:	9a 95       	dec	r25
 1be:	f1 f7       	brne	.-4      	; 0x1bc <_Z9LCD_PrintPc+0x5e>
 1c0:	00 00       	nop
		_delay_us(1);                                   // Wait for enable pulse width
		LCD_Port &= ~(1<<ENPIN);                         // Disable LCD (EN = 0) for low-to-high transition
 1c2:	9b b1       	in	r25, 0x0b	; 11
 1c4:	9d 7f       	andi	r25, 0xFD	; 253
 1c6:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	8f e3       	ldi	r24, 0x3F	; 63
 1ca:	9f e1       	ldi	r25, 0x1F	; 31
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <_Z9LCD_PrintPc+0x6e>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_Z9LCD_PrintPc+0x74>
 1d2:	00 00       	nop

// Function to print a string on the LCD
void LCD_Print (char *str)
{
	int i;  // Index variable
	for(i=0; str[i]!=0; i++)  // Iterate through each character in the string
 1d4:	6f 5f       	subi	r22, 0xFF	; 255
 1d6:	7f 4f       	sbci	r23, 0xFF	; 255
 1d8:	c5 cf       	rjmp	.-118    	; 0x164 <_Z9LCD_PrintPc+0x6>
 1da:	08 95       	ret

000001dc <_Z12LCD_PrintposccPc>:
	}
}

// Function to print a string on the LCD at a specific position
void LCD_Printpos (char row, char pos, char *str)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 1e2:	81 11       	cpse	r24, r1
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <_Z12LCD_PrintposccPc+0x1a>
 1e6:	60 31       	cpi	r22, 0x10	; 16
 1e8:	30 f4       	brcc	.+12     	; 0x1f6 <_Z12LCD_PrintposccPc+0x1a>
		LCD_Action((pos & 0x0F) | 0x80);  // Set cursor to the specified position on the first line
 1ea:	86 2f       	mov	r24, r22
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10LCD_Actionh>
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <_Z12LCD_PrintposccPc+0x2c>
	else if (row == 1 && pos<16)
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	39 f4       	brne	.+14     	; 0x208 <_Z12LCD_PrintposccPc+0x2c>
 1fa:	60 31       	cpi	r22, 0x10	; 16
 1fc:	28 f4       	brcc	.+10     	; 0x208 <_Z12LCD_PrintposccPc+0x2c>
		LCD_Action((pos & 0x0F) | 0xC0);  // Set cursor to the specified position on the second line
 1fe:	86 2f       	mov	r24, r22
 200:	8f 70       	andi	r24, 0x0F	; 15
 202:	80 6c       	ori	r24, 0xC0	; 192
 204:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10LCD_Actionh>
	LCD_Print(str);                       // Print the string
 208:	ce 01       	movw	r24, r28
 20a:	0e 94 af 00 	call	0x15e	; 0x15e <_Z9LCD_PrintPc>
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <main>:

int main()
{
	LCD_Init();                            // Initialize the LCD
 214:	0e 94 7e 00 	call	0xfc	; 0xfc <_Z8LCD_Initv>
	LCD_Print("Fahim Riaz Imran");         // Print initial message
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 af 00 	call	0x15e	; 0x15e <_Z9LCD_PrintPc>
	
	while (1)
	{
		LCD_Printpos(0, 0, "Fahim Riaz Imran");  // Print on the first line
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	51 e0       	ldi	r21, 0x01	; 1
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z12LCD_PrintposccPc>
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	89 e6       	ldi	r24, 0x69	; 105
 230:	98 e1       	ldi	r25, 0x18	; 24
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x1e>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x28>
 23c:	00 00       	nop
		_delay_ms(500);                         // Delay for 500ms
		LCD_Printpos(1, 0, "are Friends");       // Print on the second line
 23e:	41 e1       	ldi	r20, 0x11	; 17
 240:	51 e0       	ldi	r21, 0x01	; 1
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z12LCD_PrintposccPc>
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	89 e6       	ldi	r24, 0x69	; 105
 24e:	98 e1       	ldi	r25, 0x18	; 24
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x3c>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x46>
 25a:	00 00       	nop
		_delay_ms(500);                         // Delay for 500ms
		LCD_Clear();                            // Clear the LCD display
 25c:	0e 94 a2 00 	call	0x144	; 0x144 <_Z9LCD_Clearv>
 260:	df cf       	rjmp	.-66     	; 0x220 <main+0xc>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
