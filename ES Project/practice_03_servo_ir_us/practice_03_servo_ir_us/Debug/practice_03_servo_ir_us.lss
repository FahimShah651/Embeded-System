
practice_03_servo_ir_us.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000000f2  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000807  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fe  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000231  00000000  00000000  0000112d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048b  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  0000184f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 65 00 	call	0xca	; 0xca <main>
  8e:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z4initv>:
	return 0;
}

void init() {
	// Set Port B pins as inputs (IR sensors and ultrasonic sensor)
	DDRB = 0x00;
  96:	14 b8       	out	0x04, r1	; 4

	// Set servo motor pin (PB6) as output
	DDRB |= (1 << SERVO_MOTOR_PIN);
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	84 b9       	out	0x04, r24	; 4

	// Set ultrasonic sensor trigger pin (PB4) as output and echo pin (PB5) as input
	DDRB |= (1 << ULTRASONIC_TRIGGER_PIN);
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << ULTRASONIC_ECHO_PIN);
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	8f 7d       	andi	r24, 0xDF	; 223
  a8:	84 b9       	out	0x04, r24	; 4
  aa:	08 95       	ret

000000ac <_Z11rotateServoi>:

	// Find the corresponding pulse width from the lookup table
	int pulse_width = pulseWidths[angle / 45];

	// Generate PWM signal to control the servo motor
	for (int i = 0; i < 50; i++) {
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	22 33       	cpi	r18, 0x32	; 50
  b2:	31 05       	cpc	r19, r1
  b4:	4c f4       	brge	.+18     	; 0xc8 <_Z11rotateServoi+0x1c>
		// Set the servo motor pin high for the calculated pulse width duration
		PORTB |= (1 << SERVO_MOTOR_PIN);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	85 b9       	out	0x05, r24	; 5
	//	_delay_us(pulse_width);

		// Set the servo motor pin low for the remaining time
		PORTB &= ~(1 << SERVO_MOTOR_PIN);
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	8f 7b       	andi	r24, 0xBF	; 191
  c0:	85 b9       	out	0x05, r24	; 5

	// Find the corresponding pulse width from the lookup table
	int pulse_width = pulseWidths[angle / 45];

	// Generate PWM signal to control the servo motor
	for (int i = 0; i < 50; i++) {
  c2:	2f 5f       	subi	r18, 0xFF	; 255
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	f4 cf       	rjmp	.-24     	; 0xb0 <_Z11rotateServoi+0x4>
  c8:	08 95       	ret

000000ca <main>:
// Lookup table for servo motor angles and corresponding pulse width
const int servoAngles[] = {0, 45, 90, 135, 180, 225, 270, 315, 360};
const int pulseWidths[] = {500, 885, 1270, 1655, 2040, 2425, 2810, 3195, 3580};

int main() {
	init();
  ca:	0e 94 4b 00 	call	0x96	; 0x96 <_Z4initv>

	while (1) {
		// Rotate the servo motor 360 degrees in 45-degree steps
		for (int i = 0; i < sizeof(servoAngles) / sizeof(servoAngles[0]); i++) {
  ce:	c0 e0       	ldi	r28, 0x00	; 0
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	c9 30       	cpi	r28, 0x09	; 9
  d4:	d1 05       	cpc	r29, r1
  d6:	d8 f7       	brcc	.-10     	; 0xce <main+0x4>
			rotateServo(servoAngles[i]);
  d8:	fe 01       	movw	r30, r28
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	e0 50       	subi	r30, 0x00	; 0
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	80 81       	ld	r24, Z
  e4:	91 81       	ldd	r25, Z+1	; 0x01
  e6:	0e 94 56 00 	call	0xac	; 0xac <_Z11rotateServoi>
int main() {
	init();

	while (1) {
		// Rotate the servo motor 360 degrees in 45-degree steps
		for (int i = 0; i < sizeof(servoAngles) / sizeof(servoAngles[0]); i++) {
  ea:	21 96       	adiw	r28, 0x01	; 1
  ec:	f2 cf       	rjmp	.-28     	; 0xd2 <main+0x8>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
