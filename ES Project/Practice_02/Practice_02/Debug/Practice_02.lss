
Practice_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000705  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066a  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000279  00000000  00000000  00000f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001577  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define led_back_port PORTB
#define led_back_pin PB3

int main(void) {
	// Set motor and led ports as output 
	DDRB |= (1 << MOTOR_1_PIN) | (1 << MOTOR_2_PIN) | (1<<led_front_pin) | (1<<led_back_pin);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8b 61       	ori	r24, 0x1B	; 27
  84:	84 b9       	out	0x04, r24	; 4
	// Start motors
	//PORTB |= (1 << MOTOR_1_PIN) | (1 << MOTOR_2_PIN);

	do {
		// Wait for object to be detected
		if (PINB & (1 << PB2)) {
  86:	1a 9b       	sbis	0x03, 2	; 3
  88:	15 c0       	rjmp	.+42     	; 0xb4 <main+0x34>
			   PORTB &= ~(1<<led_front_pin);
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	8f 7e       	andi	r24, 0xEF	; 239
  8e:	85 b9       	out	0x05, r24	; 5
				// Stop motors
				PORTB &= ~(1 << MOTOR_1_PIN) & ~(1 << MOTOR_2_PIN);
  90:	85 b1       	in	r24, 0x05	; 5
  92:	8c 7f       	andi	r24, 0xFC	; 252
  94:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1<<led_back_pin);
  96:	85 b1       	in	r24, 0x05	; 5
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e7       	ldi	r18, 0x7F	; 127
  9e:	8a e1       	ldi	r24, 0x1A	; 26
  a0:	96 e0       	ldi	r25, 0x06	; 6
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x22>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2c>
  ac:	00 00       	nop

				// Wait 2 seconds
				_delay_ms(2000);
		        PORTB &= ~(1<<led_back_pin);
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	87 7f       	andi	r24, 0xF7	; 247
  b2:	85 b9       	out	0x05, r24	; 5
		}
			// Start motors again
			PORTB |= (1 << MOTOR_1_PIN) | (1 << MOTOR_2_PIN);
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1<<led_front_pin);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1 << MOTOR_1_PIN) | (1 << MOTOR_2_PIN) | (1<<led_front_pin) | (1<<led_back_pin);

	// Start motors
	//PORTB |= (1 << MOTOR_1_PIN) | (1 << MOTOR_2_PIN);

	do {
  c0:	e2 cf       	rjmp	.-60     	; 0x86 <main+0x6>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
