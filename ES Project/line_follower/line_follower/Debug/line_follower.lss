
line_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000787  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ba  00000000  00000000  000009e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000329  00000000  00000000  0000109d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fc  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  78:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z9obstaclesv>:
#define buzzer_port PORTC
#define buzzer_pin PC3
#define hitting_motor PC5

void obstacles(){
	PORTB &= ~(1<<led_1_front_pin);
  80:	85 b1       	in	r24, 0x05	; 5
  82:	8f 7e       	andi	r24, 0xEF	; 239
  84:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1<<led_2_front_pin);
  86:	85 b1       	in	r24, 0x05	; 5
  88:	8d 7f       	andi	r24, 0xFD	; 253
  8a:	85 b9       	out	0x05, r24	; 5
	// Stop motors
	PORTB &= ~(1 << MOTOR_1_PIN) & ~(1 << MOTOR_2_PIN);
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	8e 7d       	andi	r24, 0xDE	; 222
  90:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<led_back_pin);
  92:	85 b1       	in	r24, 0x05	; 5
  94:	88 60       	ori	r24, 0x08	; 8
  96:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	37 ea       	ldi	r19, 0xA7	; 167
  9c:	81 e6       	ldi	r24, 0x61	; 97
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	30 40       	sbci	r19, 0x00	; 0
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <_Z9obstaclesv+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_Z9obstaclesv+0x28>
  a8:	00 00       	nop

	// Wait 2 seconds
	_delay_ms(2000);
	PORTC |= (1<<hitting_motor);
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	88 b9       	out	0x08, r24	; 8
  b0:	94 e5       	ldi	r25, 0x54	; 84
  b2:	25 e8       	ldi	r18, 0x85	; 133
  b4:	35 e4       	ldi	r19, 0x45	; 69
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	91 50       	subi	r25, 0x01	; 1
  ba:	20 40       	sbci	r18, 0x00	; 0
  bc:	30 40       	sbci	r19, 0x00	; 0
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	d9 f7       	brne	.-10     	; 0xb8 <_Z9obstaclesv+0x38>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_Z9obstaclesv+0x44>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z9obstaclesv+0x46>
  c6:	00 00       	nop
	_delay_ms(8000);
	
	PORTB &= ~(1<<led_back_pin);
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	87 7f       	andi	r24, 0xF7	; 247
  cc:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1<<hitting_motor);
  ce:	88 b1       	in	r24, 0x08	; 8
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	88 b9       	out	0x08, r24	; 8
  d4:	08 95       	ret

000000d6 <_Z13motor_forwardv>:


void motor_forward()
{
	// back led
	PORTB &= ~(1<<led_back_pin);
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	85 b9       	out	0x05, r24	; 5
	// buzzer
	PORTC &= ~(1<<buzzer_pin);
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	87 7f       	andi	r24, 0xF7	; 247
  e0:	88 b9       	out	0x08, r24	; 8
	
	// Start motors again
	PORTB |= (1 << MOTOR_1_PIN) | (1 << MOTOR_2_PIN);
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	81 62       	ori	r24, 0x21	; 33
  e6:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<led_1_front_pin);
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<led_2_front_pin);
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	08 95       	ret

000000f6 <main>:
}
int main(void) {
	// Set motor and led ports as output
	DDRB |= (1 << MOTOR_1_PIN) | (1 << MOTOR_2_PIN) | (1<<led_1_front_pin)| (1<<led_2_front_pin) | (1<<led_back_pin) ;
  f6:	84 b1       	in	r24, 0x04	; 4
  f8:	8b 63       	ori	r24, 0x3B	; 59
  fa:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << buzzer_pin)|(1<<hitting_motor);
  fc:	87 b1       	in	r24, 0x07	; 7
  fe:	88 62       	ori	r24, 0x28	; 40
 100:	87 b9       	out	0x07, r24	; 7
	// Start motors
	//PORTB |= (1 << MOTOR_1_PIN) | (1 << MOTOR_2_PIN);
	
			do {
				// Wait for object to be detected
				if ((PINC & (1 << PC0))==0) {
 102:	30 9b       	sbis	0x06, 0	; 6
					obstacles();
 104:	0e 94 40 00 	call	0x80	; 0x80 <_Z9obstaclesv>
					PORTC |= (1<<buzzer_pin);
					PORTB &= ~(1<<led_1_front_pin);
					PORTB &= ~(1<<led_2_front_pin);
				} 
				else*/
			   if ((PINC & (1 << PC1)) )
 108:	31 9b       	sbis	0x06, 1	; 6
 10a:	13 c0       	rjmp	.+38     	; 0x132 <main+0x3c>
				{
					// back led
					PORTB &= ~(1<<led_back_pin);
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	85 b9       	out	0x05, r24	; 5
					// buzzer
					PORTC &= ~(1<<buzzer_pin);
 112:	88 b1       	in	r24, 0x08	; 8
 114:	87 7f       	andi	r24, 0xF7	; 247
 116:	88 b9       	out	0x08, r24	; 8
					
					PORTB |= (1<<led_1_front_pin);
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	85 b9       	out	0x05, r24	; 5
					PORTB |= (1<<led_2_front_pin);
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	82 60       	ori	r24, 0x02	; 2
 122:	85 b9       	out	0x05, r24	; 5
					
					// Motor 1 start
					PORTB |= (1 << MOTOR_1_PIN);
 124:	85 b1       	in	r24, 0x05	; 5
 126:	81 60       	ori	r24, 0x01	; 1
 128:	85 b9       	out	0x05, r24	; 5
					
					// Motor 2 stop
					PORTB &= ~(1 << MOTOR_2_PIN);
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8f 7d       	andi	r24, 0xDF	; 223
 12e:	85 b9       	out	0x05, r24	; 5
 130:	e8 cf       	rjmp	.-48     	; 0x102 <main+0xc>
					
				}
				else if ((PINB & (1<<PB2)))
 132:	1a 9b       	sbis	0x03, 2	; 3
 134:	13 c0       	rjmp	.+38     	; 0x15c <main+0x66>
				{
					// back led
					PORTB &= ~(1<<led_back_pin);
 136:	85 b1       	in	r24, 0x05	; 5
 138:	87 7f       	andi	r24, 0xF7	; 247
 13a:	85 b9       	out	0x05, r24	; 5
					// buzzer
					PORTC &= ~(1<<buzzer_pin);
 13c:	88 b1       	in	r24, 0x08	; 8
 13e:	87 7f       	andi	r24, 0xF7	; 247
 140:	88 b9       	out	0x08, r24	; 8
					
					PORTB |= (1<<led_1_front_pin);
 142:	85 b1       	in	r24, 0x05	; 5
 144:	80 61       	ori	r24, 0x10	; 16
 146:	85 b9       	out	0x05, r24	; 5
					PORTB |= (1<<led_2_front_pin);
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	85 b9       	out	0x05, r24	; 5
					
					
					// Motor 1 stop
					PORTB &= ~(1 << MOTOR_1_PIN);
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	8e 7f       	andi	r24, 0xFE	; 254
 152:	85 b9       	out	0x05, r24	; 5
					
					// Motor 2 start
					PORTB |= (1 << MOTOR_2_PIN);
 154:	85 b1       	in	r24, 0x05	; 5
 156:	80 62       	ori	r24, 0x20	; 32
 158:	85 b9       	out	0x05, r24	; 5
 15a:	d3 cf       	rjmp	.-90     	; 0x102 <main+0xc>
					
					
				}
				else
				motor_forward();
 15c:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z13motor_forwardv>
 160:	d0 cf       	rjmp	.-96     	; 0x102 <main+0xc>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
